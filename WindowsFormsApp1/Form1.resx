<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="$this.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAd3d2AHFxcBKQkZEunp+gAnFx
        cQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQkNCAD4/PgKAgYIRkJCPXaCh
        obDMz9EHr7CxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC2trUAsLCwKqam
        paeam5ukenx/k5CTlQaZm50AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMPD
        wwC/wL87urq58sjJyOLV19d/2tzdCNPV1gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        B/6AAB//4AAf//AAf//8GP///z////////8=
</value>
  </data>
</root>